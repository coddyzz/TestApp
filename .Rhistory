getAirports
initializeConnectionStrings <- function(){
globalParameters <- {}
# modify connection strings as needed for installation
globalParameters$UserDatabase <- "Provider=MSDASQL;Driver={MySQL ODBC 8.0 ANSI Driver};Server=localhost;Database=openskytracks;User=pj16;Password=Venture21;Option=3;"
globalParameters$StaticDatabase<- "C:\\Users\\Coddy\\Desktop\\OpenAviationData.sqlite3"
SetGlobals(toJSON(globalParameters))
}
sqlQueryGetFromConnection<-function(querytext,strConn){
#open the connection
channel <- odbcDriverConnect(connection=strConn)
#create the new dataframe from the query
queryresult<-sqlQuery(channel, paste(querytext))
close(channel) #close the connection
#return the result
queryresult
}
sqlQueryGetFromDSN<-function(querytext,dataSourceName){
#open the connection
channel <- odbcConnect(dataSourceName)
#create the new dataframe from the query
queryresult<-sqlQuery(channel, paste(querytext))
close(channel) #close the connection
#return the result
queryresult
}
sqlQueryGetFromSqlitePath <- function(querytext,strPath){
#Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), strPath)
queryresult <- dbGetQuery(conn,querytext)
#Disconnect from the database
dbDisconnect(conn)
#return the result
queryresult
}
dynamicQueryGet <- function(querytext){
sqlQueryGetFromConnection(querytext,CONSTANTS$USERDATABASE)
}
staticQueryGet <- function(querytext){
sqlQueryGetFromSqlitePath(querytext,CONSTANTS$STATICDATABASE)
}
testQueries <- function(){
initializeConnectionStrings()
querytext <- "SELECT * FROM states"
head(dynamicQueryGet(querytext))
}
testStaticQueries <- function(){
initializeConnectionStrings()
querytext <- "SELECT * FROM Airports"
head(staticQueryGet(querytext))
}
getAirports <- function (params){
initializeConnectionStrings()
querytext <- "SELECT * FROM Airports"
queryresult <- staticQueryGet(querytext)
#queryresult <- head(queryresult)
airports <- queryresult[,c("Name","Country","IATA","Longitude","Latitude","Altitude")]
airports
}
getAirports
getAirports()
data <- c(6.10,6.74,6.22,5.65,6.38,6.70,7.00,6.43,7.00,6.70,6.70,5.94,6.28,
6.34,6.62,6.55,2.92,6.10,6.20,6.70,7.00,6.85,6.31,6.26,6.36,6.28,
6.38,6.70,6.62,7.00,6.45,6.31,2.86,6.31,6.09,6.17,6.64,6.45,
7.00,6.18,6.58,5.38,6.34,7.00,5.70,6.65,6.56,6.00,6.70,6.45)
trimData <- Trim(data,trim=0.1)
summary(data)
trimData <- Trim(data,trim=0.1)
trimData <- Trim(data,trim=0.05)
library(gdata)
library(DescTools)
trimData <- Trim(data,trim=0.05)
summary(trimData)
summary(data)
trimData <- Trim(data,trim=0.05)
summary(trimData)
summary(data)
trimData <- Trim(data,trim=0.10)
summary(trimData)
if(!require(rjson)){
install.packages("rjson")
library(rjson)
}
setwd("C:\\Users\\Coddy\\Desktop\\Git\\testApp")
a <- fromJSON(file="project2.vc_tower.json")
length(a)
#b <-a[[1]]
for( i in c(seq(length(a)))){
test <- toJSON(a[[i]])
write(test, "test1.json",append = TRUE,sep = "\n")
}
if(!require(rjson)){
install.packages("rjson")
library(rjson)
}
setwd("C:\\Users\\Coddy\\Desktop\\Git\\testApp")
a <- fromJSON(file="project2.vc_tower.json")
length(a)
#b <-a[[1]]
for( i in c(seq(length(a)))){
test <- toJSON(a[[i]])
write(test, "test1.json",append = TRUE,sep = "\n")
}
a <- fromJSON(file="project2.vc_tower.json")
if(!require(rjson)){
install.packages("rjson")
library(rjson)
}
setwd("C:\\Users\\Coddy\\Desktop\\Git\\testApp")
a <- fromJSON(file="project2.vc_tower.json")
length(a)
#b <-a[[1]]
for( i in c(seq(length(a)))){
test <- toJSON(a[[i]])
write(test, "test1.json",append = TRUE,sep = "\n")
}
for( i in c(seq(length(a)))){
test <- toJSON(a[[i]])
write(test, "test1.json",append = TRUE,sep = "\n")
}
